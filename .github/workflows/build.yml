name: build

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  LOG_LEVEL: debug
  NODE_VERSION: 22 # renovate: datasource=node-version depName=node

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: false

      - uses: ./setup
        with:
          checkout: false
          save-cache: true

      - name: validate cache key
        shell: bash
        run: |
          re="^node_modules-[0-9a-z]+$"
          if [[ ${CACHE_KEY} =~ $re ]]; then
            echo "Cache key ok: ${CACHE_KEY}"
          else
            echo "Cache key invalid: ${CACHE_KEY}"
            exit 1
          fi

  test:
    needs:
      - setup
    runs-on: ubuntu-latest

    # tests shouldn't need more than 15 min
    timeout-minutes: 15

    steps:
      - name: Init platform
        id: init
        shell: bash
        run: |
          git config --global core.autocrlf false
          git config --global core.symlinks true

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 10 # required by codecov
          show-progress: false

      - uses: ./setup
        with:
          checkout: false

      - name: lint
        run: |
          pnpm eslint -f gha
          pnpm prettier

      - run: pnpm compile

      - run: pnpm test:vitest
        env:
          FORCE_COLOR: true

      - name: Upload coverage
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: coverage
          path: coverage

      - name: Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e:
    needs:
      - setup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: false

      - uses: ./setup
        with:
          checkout: false

      - run: pnpm compile

      - name: remove node_modules
        run: rm -rf node_modules

      - name: docker-config
        uses: ./
        with:
          command: docker-config

      - name: Prepare e2e
        run: |
          docker pull alpine
          docker tag alpine renovate/ubuntu
          docker tag alpine renovate/ubuntu:18.04

      - name: docker-builder (node)
        uses: ./
        with:
          command: docker-builder
          image-prefix: containerbase/
          image: node
          config: e2e/node.json
          dry-run: true
          prune: true

      - name: docker-builder (yarn)
        uses: ./
        with:
          command: docker-builder
          config: e2e/yarn.json
          dry-run: true
          major-minor: false

      - name: docker-builder (python)
        uses: ./
        with:
          command: docker-builder
          config: e2e/python.json
          tag-suffix: 'slim'
          build-args: 'IMAGE=slim'
          dry-run: true

      - name: docker-builder (ubuntu)
        uses: ./
        with:
          command: docker-builder
          config: e2e/ubuntu.json
          dry-run: true

      - name: docker-builder (helm)
        uses: ./
        with:
          command: docker-builder
          config: e2e/helm.json
          dry-run: true
          token: ${{ github.token }}

      - name: docker-builder (java)
        uses: ./
        with:
          command: docker-builder
          config: e2e/java.json
          dry-run: true

      - name: binary-builder (python)
        uses: ./
        with:
          command: binary-builder
          config: e2e/python.json
          dry-run: true
          token: ${{ github.token }}
        env:
          DISTRO: focal
          ARCH: aarch64

      - name: dummy-command
        uses: ./
        with:
          command: dummy
          dry-run: true

  e2e-os:
    needs:
      - setup
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 10

    strategy:
      matrix:
        os:
          - linux
          - macos
          - windows

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: false

      - uses: ./setup
        with:
          checkout: false
          cache: false
          node-version: ${{ env.NODE_VERSION }}

      - name: validate cache key
        shell: bash
        run: |
          os="${{ runner.os != 'Linux' && format('-{0}', runner.os) || '' }}"
          re="^node_modules${os}-${{ env.NODE_VERSION }}-[0-9a-z]+$"
          if [[ ${CACHE_KEY} =~ $re ]]; then
            echo "Cache key ok: ${CACHE_KEY}"
          else
            echo "Cache key invalid: ${CACHE_KEY}"
            exit 1
          fi

  # Catch-all required check for test matrix and coverage
  test-success:
    needs:
      - setup
      - test
      - e2e
      - e2e-os
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: always()
    steps:
      - name: Fail for failed or cancelled setup
        if: |
          needs.setup.result == 'failure' ||
          needs.setup.result == 'cancelled'
        run: exit 1

      - name: Fail for failed or cancelled test
        if: |
          needs.test.result == 'failure' ||
          needs.test.result == 'cancelled'
        run: exit 1

      - name: Fail for failed or cancelled e2e
        if: |
          needs.e2e.result == 'failure' ||
          needs.e2e.result == 'cancelled'
        run: exit 1

      - name: Fail for failed or cancelled e2e-os
        if: |
          needs.e2e-os.result == 'failure' ||
          needs.e2e-os.result == 'cancelled'
        run: exit 1

  release:
    needs:
      - test-success

    runs-on: ubuntu-latest

    # tests shouldn't need more than 15 min
    timeout-minutes: 15

    permissions:
      contents: write
      issues: write
      id-token: write

    steps:
      - name: Init platform
        id: init
        shell: bash
        run: |
          # Use github action user for the commit
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: 'release'
          show-progress: false

      - name: fetch pr
        if: ${{github.event_name == 'pull_request'}}
        run: |
          git fetch origin +${{ github.sha }}:${{ github.ref }}

      - name: Merge
        id: merge
        run: |
          git merge --no-ff -Xtheirs -m 'skip: merge (${{ github.sha }}) [skip release]' ${{ github.sha }}
          commit=$(git rev-parse HEAD)
          echo "commit=${commit}" >> $GITHUB_OUTPUT

      - uses: ./setup
        with:
          checkout: false

      - name: Push release branch
        run: git push origin release:release
        if: ${{github.ref == 'refs/heads/main'}}

      - name: Release
        run: |
          # override for semantic-release
          export GITHUB_REF=refs/heads/release GITHUB_SHA=${{ steps.merge.outputs.commit }}
          pnpm release
        if: ${{github.ref == 'refs/heads/main'}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
